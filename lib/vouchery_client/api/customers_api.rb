=begin
#Vouchery API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0
Contact: hello@vouchery.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module Vouchery
  class CustomersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign vouchers to a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject1] :inline_object1 
    # @return [Customer]
    def assign_vouchers_to_customer(identifier, opts = {})
      data, _status_code, _headers = assign_vouchers_to_customer_with_http_info(identifier, opts)
      data
    end

    # Assign vouchers to a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject1] :inline_object1 
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def assign_vouchers_to_customer_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.assign_vouchers_to_customer ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomersApi.assign_vouchers_to_customer"
      end
      # resource path
      local_var_path = '/customers/{identifier}/vouchers'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object1']) 

      # return_type
      return_type = opts[:return_type] || 'Customer' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#assign_vouchers_to_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a customer
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :customer 
    # @return [Customer]
    def create_customer(opts = {})
      data, _status_code, _headers = create_customer_with_http_info(opts)
      data
    end

    # Create a customer
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :customer 
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def create_customer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.create_customer ...'
      end
      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'customer']) 

      # return_type
      return_type = opts[:return_type] || 'Customer' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#create_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_customer(identifier, opts = {})
      delete_customer_with_http_info(identifier, opts)
      nil
    end

    # Delete a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_customer_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.delete_customer ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomersApi.delete_customer"
      end
      # resource path
      local_var_path = '/customers/{identifier}'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#delete_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def get_customer(identifier, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(identifier, opts)
      data
    end

    # Get a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def get_customer_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomersApi.get_customer"
      end
      # resource path
      local_var_path = '/customers/{identifier}'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Customer' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get redemptions performed by a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Redemption>]
    def get_customer_redemptions(identifier, opts = {})
      data, _status_code, _headers = get_customer_redemptions_with_http_info(identifier, opts)
      data
    end

    # Get redemptions performed by a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Redemption>, Integer, Hash)>] Array<Redemption> data, response status code and response headers
    def get_customer_redemptions_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer_redemptions ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomersApi.get_customer_redemptions"
      end
      # resource path
      local_var_path = '/customers/{identifier}/redemptions'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Redemption>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer_redemptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get vouchers assigned to a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<Voucher>]
    def get_customer_vouchers(identifier, opts = {})
      data, _status_code, _headers = get_customer_vouchers_with_http_info(identifier, opts)
      data
    end

    # Get vouchers assigned to a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Voucher>, Integer, Hash)>] Array<Voucher> data, response status code and response headers
    def get_customer_vouchers_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer_vouchers ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomersApi.get_customer_vouchers"
      end
      # resource path
      local_var_path = '/customers/{identifier}/vouchers'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Voucher>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer_vouchers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all customers
    # @param [Hash] opts the optional parameters
    # @return [Array<Customer>]
    def get_customers(opts = {})
      data, _status_code, _headers = get_customers_with_http_info(opts)
      data
    end

    # Get all customers
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Customer>, Integer, Hash)>] Array<Customer> data, response status code and response headers
    def get_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customers ...'
      end
      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Customer>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import your own customers
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @return [InlineResponse200]
    def import_customers(opts = {})
      data, _status_code, _headers = import_customers_with_http_info(opts)
      data
    end

    # Import your own customers
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def import_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.import_customers ...'
      end
      # resource path
      local_var_path = '/customers/import'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse200' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#import_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove (unassign) vouchers from a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :inline_object 
    # @return [Customer]
    def remove_vouchers_from_customer(identifier, opts = {})
      data, _status_code, _headers = remove_vouchers_from_customer_with_http_info(identifier, opts)
      data
    end

    # Remove (unassign) vouchers from a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :inline_object 
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def remove_vouchers_from_customer_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.remove_vouchers_from_customer ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomersApi.remove_vouchers_from_customer"
      end
      # resource path
      local_var_path = '/customers/{identifier}/vouchers'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'inline_object']) 

      # return_type
      return_type = opts[:return_type] || 'Customer' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#remove_vouchers_from_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :customer 
    # @return [Customer]
    def update_customer(identifier, opts = {})
      data, _status_code, _headers = update_customer_with_http_info(identifier, opts)
      data
    end

    # Update a customer
    # @param identifier [String] Customer identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Customer] :customer 
    # @return [Array<(Customer, Integer, Hash)>] Customer data, response status code and response headers
    def update_customer_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.update_customer ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling CustomersApi.update_customer"
      end
      # resource path
      local_var_path = '/customers/{identifier}'.sub('{' + 'identifier' + '}', CGI.escape(identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'customer']) 

      # return_type
      return_type = opts[:return_type] || 'Customer' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#update_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
