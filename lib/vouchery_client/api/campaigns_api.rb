=begin
#Vouchery API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0
Contact: hello@vouchery.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module Vouchery
  class CampaignsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a campaign
    # @param [Hash] opts the optional parameters
    # @option opts [Campaign] :campaign 
    # @return [Campaign]
    def create_campaign(opts = {})
      data, _status_code, _headers = create_campaign_with_http_info(opts)
      data
    end

    # Create a campaign
    # @param [Hash] opts the optional parameters
    # @option opts [Campaign] :campaign 
    # @return [Array<(Campaign, Integer, Hash)>] Campaign data, response status code and response headers
    def create_campaign_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.create_campaign ...'
      end
      # resource path
      local_var_path = '/campaigns'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'campaign']) 

      # return_type
      return_type = opts[:return_type] || 'Campaign' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#create_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a campaign
    # @param id [Integer] Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_campaign(id, opts = {})
      delete_campaign_with_http_info(id, opts)
      nil
    end

    # Delete a campaign
    # @param id [Integer] Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_campaign_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.delete_campaign ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CampaignsApi.delete_campaign"
      end
      # resource path
      local_var_path = '/campaigns/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#delete_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sub campaigns by params
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name_cont Name contains
    # @option opts [String] :status_eq Status
    # @option opts [String] :template_eq Template (type) of sub campaign
    # @option opts [String] :triggers_on_eq Triggers On
    # @option opts [String] :trigger_name_cont Trigger Name contains
    # @return [Array<Campaign>]
    def find_sub_campaigns(opts = {})
      data, _status_code, _headers = find_sub_campaigns_with_http_info(opts)
      data
    end

    # Get sub campaigns by params
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name_cont Name contains
    # @option opts [String] :status_eq Status
    # @option opts [String] :template_eq Template (type) of sub campaign
    # @option opts [String] :triggers_on_eq Triggers On
    # @option opts [String] :trigger_name_cont Trigger Name contains
    # @return [Array<(Array<Campaign>, Integer, Hash)>] Array<Campaign> data, response status code and response headers
    def find_sub_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.find_sub_campaigns ...'
      end
      # resource path
      local_var_path = '/campaigns/sub'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name_cont'] = opts[:'name_cont'] if !opts[:'name_cont'].nil?
      query_params[:'status_eq'] = opts[:'status_eq'] if !opts[:'status_eq'].nil?
      query_params[:'template_eq'] = opts[:'template_eq'] if !opts[:'template_eq'].nil?
      query_params[:'triggers_on_eq'] = opts[:'triggers_on_eq'] if !opts[:'triggers_on_eq'].nil?
      query_params[:'trigger_name_cont'] = opts[:'trigger_name_cont'] if !opts[:'trigger_name_cont'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Campaign>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#find_sub_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a campaign
    # @param id [Integer] Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def get_campaign(id, opts = {})
      data, _status_code, _headers = get_campaign_with_http_info(id, opts)
      data
    end

    # Get a campaign
    # @param id [Integer] Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Integer, Hash)>] Campaign data, response status code and response headers
    def get_campaign_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.get_campaign ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CampaignsApi.get_campaign"
      end
      # resource path
      local_var_path = '/campaigns/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Campaign' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#get_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get main campaigns with children by params
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name_cont Name contains
    # @option opts [String] :team_eq Team
    # @option opts [String] :status_eq Status
    # @option opts [String] :template_eq Template (promotion type) of main campaign
    # @return [Array<Campaign>]
    def get_campaigns(opts = {})
      data, _status_code, _headers = get_campaigns_with_http_info(opts)
      data
    end

    # Get main campaigns with children by params
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name_cont Name contains
    # @option opts [String] :team_eq Team
    # @option opts [String] :status_eq Status
    # @option opts [String] :template_eq Template (promotion type) of main campaign
    # @return [Array<(Array<Campaign>, Integer, Hash)>] Array<Campaign> data, response status code and response headers
    def get_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.get_campaigns ...'
      end
      # resource path
      local_var_path = '/campaigns'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name_cont'] = opts[:'name_cont'] if !opts[:'name_cont'].nil?
      query_params[:'team_eq'] = opts[:'team_eq'] if !opts[:'team_eq'].nil?
      query_params[:'status_eq'] = opts[:'status_eq'] if !opts[:'status_eq'].nil?
      query_params[:'template_eq'] = opts[:'template_eq'] if !opts[:'template_eq'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Campaign>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#get_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a campaign
    # @param id [Integer] Campaign ID
    # @param [Hash] opts the optional parameters
    # @option opts [Campaign] :campaign 
    # @return [Campaign]
    def update_campaign(id, opts = {})
      data, _status_code, _headers = update_campaign_with_http_info(id, opts)
      data
    end

    # Update a campaign
    # @param id [Integer] Campaign ID
    # @param [Hash] opts the optional parameters
    # @option opts [Campaign] :campaign 
    # @return [Array<(Campaign, Integer, Hash)>] Campaign data, response status code and response headers
    def update_campaign_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.update_campaign ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CampaignsApi.update_campaign"
      end
      # resource path
      local_var_path = '/campaigns/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'campaign']) 

      # return_type
      return_type = opts[:return_type] || 'Campaign' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#update_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
