=begin
#Vouchery API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0
Contact: hello@vouchery.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module Vouchery
  class RedemptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Confirm a redemption
    # @param code [String] Voucher code
    # @param transaction_id [String] ID which identifies the transaction in customer system, e.g. order number, invoice number
    # @param [Hash] opts the optional parameters
    # @return [Redemption]
    def confirm_redemption(code, transaction_id, opts = {})
      data, _status_code, _headers = confirm_redemption_with_http_info(code, transaction_id, opts)
      data
    end

    # Confirm a redemption
    # @param code [String] Voucher code
    # @param transaction_id [String] ID which identifies the transaction in customer system, e.g. order number, invoice number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Redemption, Integer, Hash)>] Redemption data, response status code and response headers
    def confirm_redemption_with_http_info(code, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedemptionsApi.confirm_redemption ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling RedemptionsApi.confirm_redemption"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling RedemptionsApi.confirm_redemption"
      end
      # resource path
      local_var_path = '/vouchers/{code}/redemptions'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'transaction_id'] = transaction_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Redemption' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedemptionsApi#confirm_redemption\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a redemption
    # @param code [String] Voucher code
    # @param [Hash] opts the optional parameters
    # @option opts [Redemption] :redemption 
    # @return [Redemption]
    def create_redemption(code, opts = {})
      data, _status_code, _headers = create_redemption_with_http_info(code, opts)
      data
    end

    # Create a redemption
    # @param code [String] Voucher code
    # @param [Hash] opts the optional parameters
    # @option opts [Redemption] :redemption 
    # @return [Array<(Redemption, Integer, Hash)>] Redemption data, response status code and response headers
    def create_redemption_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedemptionsApi.create_redemption ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling RedemptionsApi.create_redemption"
      end
      # resource path
      local_var_path = '/vouchers/{code}/redemptions'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'redemption']) 

      # return_type
      return_type = opts[:return_type] || 'Redemption' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedemptionsApi#create_redemption\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a redemption
    # @param code [String] Voucher code
    # @param transaction_id [String] ID which identifies the transaction in customer system, e.g. order number, invoice number
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_redemption(code, transaction_id, opts = {})
      delete_redemption_with_http_info(code, transaction_id, opts)
      nil
    end

    # Delete a redemption
    # @param code [String] Voucher code
    # @param transaction_id [String] ID which identifies the transaction in customer system, e.g. order number, invoice number
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_redemption_with_http_info(code, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedemptionsApi.delete_redemption ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling RedemptionsApi.delete_redemption"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling RedemptionsApi.delete_redemption"
      end
      # resource path
      local_var_path = '/vouchers/{code}/redemptions'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'transaction_id'] = transaction_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedemptionsApi#delete_redemption\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a redemption
    # @param code [String] Voucher code
    # @param transaction_id [String] ID which identifies the transaction in customer system, e.g. order number, invoice number
    # @param [Hash] opts the optional parameters
    # @return [Redemption]
    def get_redemption(code, transaction_id, opts = {})
      data, _status_code, _headers = get_redemption_with_http_info(code, transaction_id, opts)
      data
    end

    # Get a redemption
    # @param code [String] Voucher code
    # @param transaction_id [String] ID which identifies the transaction in customer system, e.g. order number, invoice number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Redemption, Integer, Hash)>] Redemption data, response status code and response headers
    def get_redemption_with_http_info(code, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedemptionsApi.get_redemption ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling RedemptionsApi.get_redemption"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling RedemptionsApi.get_redemption"
      end
      # resource path
      local_var_path = '/vouchers/{code}/redemptions'.sub('{' + 'code' + '}', CGI.escape(code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'transaction_id'] = transaction_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Redemption' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedemptionsApi#get_redemption\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all redemptions for a campaign
    # @param campaign_id [Integer] Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [Array<Redemption>]
    def get_redemptions(campaign_id, opts = {})
      data, _status_code, _headers = get_redemptions_with_http_info(campaign_id, opts)
      data
    end

    # Get all redemptions for a campaign
    # @param campaign_id [Integer] Campaign ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Redemption>, Integer, Hash)>] Array<Redemption> data, response status code and response headers
    def get_redemptions_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RedemptionsApi.get_redemptions ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling RedemptionsApi.get_redemptions"
      end
      # resource path
      local_var_path = '/campaigns/{campaign_id}/redemptions'.sub('{' + 'campaign_id' + '}', CGI.escape(campaign_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Redemption>' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RedemptionsApi#get_redemptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
