=begin
#Vouchery API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0
Contact: hello@vouchery.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'date'

module Vouchery
  class MainCampaignChildren
    # This field is required only when you create a campaign. Main Campaign is a wrapper for multipe Sub Campaings, grouped together. Main Campaign can have own budget and redemptions limit.
    attr_accessor :type

    attr_accessor :id

    # Required only for subcampaigns.
    attr_accessor :parent_id

    attr_accessor :status

    # The name of the campaign must be unique.
    attr_accessor :name

    # What type of trigger sub campaign is reacting on to check rules and give rewards.
    attr_accessor :triggers_on

    # If campaign is triggered by custom trigger, it's name should be specified.
    attr_accessor :trigger_name

    # Valid template values for MainCampaign are: discount, loyalty, gift_card. For SubCampaign valid templates are sub_redemption, sub_reward_points, sub_generate_vouchers.
    attr_accessor :template

    attr_accessor :description

    # Text that can be displayed to the customer once the redemption is validated or confirmed.
    attr_accessor :customer_information

    # The budget available for all discount campaigns grouped by this campaign.
    attr_accessor :max_total_budget

    # The maximum number of redemptions available across all discount campaigns grouped by this campaign.
    attr_accessor :max_redemptions

    attr_accessor :minimum_value

    attr_accessor :max_discount

    attr_accessor :redemptions_count

    attr_accessor :total_budget_spent

    attr_accessor :vouchers_distributed_count

    attr_accessor :vouchers_count

    # Currency denominating monetary values in this campaign (USD, GBP, EUR, AUD)
    attr_accessor :currency

    # Currency symbol ($, £, €)
    attr_accessor :currency_symbol

    attr_accessor :team

    attr_accessor :channel

    attr_accessor :purpose

    attr_accessor :budget_code

    attr_accessor :medium

    # Determines what type of vouchers can be generated for campaign. Generic vouchers (eg. SALE10) can be redeemed multiple times. Unique vouchers allow for greater control and better tracking of who and how is using your promotions.
    attr_accessor :voucher_type

    # What characters should the code include when new voucher is created. Possible choices are digits, letters, and mixed.
    attr_accessor :voucher_code_type

    # How long should the random part of the code be? Valid values are between 2 and 10, depending on batch size.
    attr_accessor :voucher_random_part_length

    # A prefix that will be used to generate vouchers. Needs to be unique within project.
    attr_accessor :voucher_prefix

    attr_accessor :created_at

    attr_accessor :created_by

    attr_accessor :updated_at

    attr_accessor :updated_by

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'id' => :'id',
        :'parent_id' => :'parent_id',
        :'status' => :'status',
        :'name' => :'name',
        :'triggers_on' => :'triggers_on',
        :'trigger_name' => :'trigger_name',
        :'template' => :'template',
        :'description' => :'description',
        :'customer_information' => :'customer_information',
        :'max_total_budget' => :'max_total_budget',
        :'max_redemptions' => :'max_redemptions',
        :'minimum_value' => :'minimum_value',
        :'max_discount' => :'max_discount',
        :'redemptions_count' => :'redemptions_count',
        :'total_budget_spent' => :'total_budget_spent',
        :'vouchers_distributed_count' => :'vouchers_distributed_count',
        :'vouchers_count' => :'vouchers_count',
        :'currency' => :'currency',
        :'currency_symbol' => :'currency_symbol',
        :'team' => :'team',
        :'channel' => :'channel',
        :'purpose' => :'purpose',
        :'budget_code' => :'budget_code',
        :'medium' => :'medium',
        :'voucher_type' => :'voucher_type',
        :'voucher_code_type' => :'voucher_code_type',
        :'voucher_random_part_length' => :'voucher_random_part_length',
        :'voucher_prefix' => :'voucher_prefix',
        :'created_at' => :'created_at',
        :'created_by' => :'created_by',
        :'updated_at' => :'updated_at',
        :'updated_by' => :'updated_by'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'String',
        :'id' => :'Integer',
        :'parent_id' => :'Integer',
        :'status' => :'String',
        :'name' => :'String',
        :'triggers_on' => :'String',
        :'trigger_name' => :'String',
        :'template' => :'String',
        :'description' => :'String',
        :'customer_information' => :'String',
        :'max_total_budget' => :'Float',
        :'max_redemptions' => :'Float',
        :'minimum_value' => :'Float',
        :'max_discount' => :'Float',
        :'redemptions_count' => :'Float',
        :'total_budget_spent' => :'Float',
        :'vouchers_distributed_count' => :'Integer',
        :'vouchers_count' => :'Integer',
        :'currency' => :'String',
        :'currency_symbol' => :'String',
        :'team' => :'String',
        :'channel' => :'String',
        :'purpose' => :'String',
        :'budget_code' => :'String',
        :'medium' => :'String',
        :'voucher_type' => :'String',
        :'voucher_code_type' => :'String',
        :'voucher_random_part_length' => :'Float',
        :'voucher_prefix' => :'String',
        :'created_at' => :'DateTime',
        :'created_by' => :'CampaignCreatedBy',
        :'updated_at' => :'DateTime',
        :'updated_by' => :'CampaignCreatedBy'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'name',
        :'triggers_on',
        :'trigger_name',
        :'description',
        :'customer_information',
        :'max_total_budget',
        :'max_redemptions',
        :'minimum_value',
        :'max_discount',
        :'redemptions_count',
        :'total_budget_spent',
        :'vouchers_distributed_count',
        :'vouchers_count',
        :'team',
        :'channel',
        :'purpose',
        :'budget_code',
        :'medium',
        :'voucher_type',
        :'voucher_code_type',
        :'voucher_random_part_length',
        :'voucher_prefix',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Vouchery::MainCampaignChildren` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Vouchery::MainCampaignChildren`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'triggers_on')
        self.triggers_on = attributes[:'triggers_on']
      end

      if attributes.key?(:'trigger_name')
        self.trigger_name = attributes[:'trigger_name']
      end

      if attributes.key?(:'template')
        self.template = attributes[:'template']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'customer_information')
        self.customer_information = attributes[:'customer_information']
      end

      if attributes.key?(:'max_total_budget')
        self.max_total_budget = attributes[:'max_total_budget']
      end

      if attributes.key?(:'max_redemptions')
        self.max_redemptions = attributes[:'max_redemptions']
      end

      if attributes.key?(:'minimum_value')
        self.minimum_value = attributes[:'minimum_value']
      end

      if attributes.key?(:'max_discount')
        self.max_discount = attributes[:'max_discount']
      end

      if attributes.key?(:'redemptions_count')
        self.redemptions_count = attributes[:'redemptions_count']
      end

      if attributes.key?(:'total_budget_spent')
        self.total_budget_spent = attributes[:'total_budget_spent']
      end

      if attributes.key?(:'vouchers_distributed_count')
        self.vouchers_distributed_count = attributes[:'vouchers_distributed_count']
      end

      if attributes.key?(:'vouchers_count')
        self.vouchers_count = attributes[:'vouchers_count']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'currency_symbol')
        self.currency_symbol = attributes[:'currency_symbol']
      end

      if attributes.key?(:'team')
        self.team = attributes[:'team']
      end

      if attributes.key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.key?(:'purpose')
        self.purpose = attributes[:'purpose']
      end

      if attributes.key?(:'budget_code')
        self.budget_code = attributes[:'budget_code']
      end

      if attributes.key?(:'medium')
        self.medium = attributes[:'medium']
      end

      if attributes.key?(:'voucher_type')
        self.voucher_type = attributes[:'voucher_type']
      end

      if attributes.key?(:'voucher_code_type')
        self.voucher_code_type = attributes[:'voucher_code_type']
      end

      if attributes.key?(:'voucher_random_part_length')
        self.voucher_random_part_length = attributes[:'voucher_random_part_length']
      end

      if attributes.key?(:'voucher_prefix')
        self.voucher_prefix = attributes[:'voucher_prefix']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'updated_by')
        self.updated_by = attributes[:'updated_by']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @parent_id.nil?
        invalid_properties.push('invalid value for "parent_id", parent_id cannot be nil.')
      end

      if !@voucher_random_part_length.nil? && @voucher_random_part_length > 10
        invalid_properties.push('invalid value for "voucher_random_part_length", must be smaller than or equal to 10.')
      end

      if !@voucher_random_part_length.nil? && @voucher_random_part_length < 3
        invalid_properties.push('invalid value for "voucher_random_part_length", must be greater than or equal to 3.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["MainCampaign", "SubCampaign"])
      return false unless type_validator.valid?(@type)
      return false if @parent_id.nil?
      status_validator = EnumAttributeValidator.new('String', ["draft", "active", "inactive", "archived"])
      return false unless status_validator.valid?(@status)
      triggers_on_validator = EnumAttributeValidator.new('String', ["customer_points_change", "redemption", "custom"])
      return false unless triggers_on_validator.valid?(@triggers_on)
      template_validator = EnumAttributeValidator.new('String', ["discount", "loyalty", "gift_card", "sub_redemption", "sub_reward_points", "sub_generate_vouchers"])
      return false unless template_validator.valid?(@template)
      voucher_type_validator = EnumAttributeValidator.new('String', ["unique", "generic"])
      return false unless voucher_type_validator.valid?(@voucher_type)
      voucher_code_type_validator = EnumAttributeValidator.new('String', ["digits", "letters", "mixed"])
      return false unless voucher_code_type_validator.valid?(@voucher_code_type)
      return false if !@voucher_random_part_length.nil? && @voucher_random_part_length > 10
      return false if !@voucher_random_part_length.nil? && @voucher_random_part_length < 3
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["MainCampaign", "SubCampaign"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["draft", "active", "inactive", "archived"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] triggers_on Object to be assigned
    def triggers_on=(triggers_on)
      validator = EnumAttributeValidator.new('String', ["customer_points_change", "redemption", "custom"])
      unless validator.valid?(triggers_on)
        fail ArgumentError, "invalid value for \"triggers_on\", must be one of #{validator.allowable_values}."
      end
      @triggers_on = triggers_on
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] template Object to be assigned
    def template=(template)
      validator = EnumAttributeValidator.new('String', ["discount", "loyalty", "gift_card", "sub_redemption", "sub_reward_points", "sub_generate_vouchers"])
      unless validator.valid?(template)
        fail ArgumentError, "invalid value for \"template\", must be one of #{validator.allowable_values}."
      end
      @template = template
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] voucher_type Object to be assigned
    def voucher_type=(voucher_type)
      validator = EnumAttributeValidator.new('String', ["unique", "generic"])
      unless validator.valid?(voucher_type)
        fail ArgumentError, "invalid value for \"voucher_type\", must be one of #{validator.allowable_values}."
      end
      @voucher_type = voucher_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] voucher_code_type Object to be assigned
    def voucher_code_type=(voucher_code_type)
      validator = EnumAttributeValidator.new('String', ["digits", "letters", "mixed"])
      unless validator.valid?(voucher_code_type)
        fail ArgumentError, "invalid value for \"voucher_code_type\", must be one of #{validator.allowable_values}."
      end
      @voucher_code_type = voucher_code_type
    end

    # Custom attribute writer method with validation
    # @param [Object] voucher_random_part_length Value to be assigned
    def voucher_random_part_length=(voucher_random_part_length)
      if !voucher_random_part_length.nil? && voucher_random_part_length > 10
        fail ArgumentError, 'invalid value for "voucher_random_part_length", must be smaller than or equal to 10.'
      end

      if !voucher_random_part_length.nil? && voucher_random_part_length < 3
        fail ArgumentError, 'invalid value for "voucher_random_part_length", must be greater than or equal to 3.'
      end

      @voucher_random_part_length = voucher_random_part_length
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          id == o.id &&
          parent_id == o.parent_id &&
          status == o.status &&
          name == o.name &&
          triggers_on == o.triggers_on &&
          trigger_name == o.trigger_name &&
          template == o.template &&
          description == o.description &&
          customer_information == o.customer_information &&
          max_total_budget == o.max_total_budget &&
          max_redemptions == o.max_redemptions &&
          minimum_value == o.minimum_value &&
          max_discount == o.max_discount &&
          redemptions_count == o.redemptions_count &&
          total_budget_spent == o.total_budget_spent &&
          vouchers_distributed_count == o.vouchers_distributed_count &&
          vouchers_count == o.vouchers_count &&
          currency == o.currency &&
          currency_symbol == o.currency_symbol &&
          team == o.team &&
          channel == o.channel &&
          purpose == o.purpose &&
          budget_code == o.budget_code &&
          medium == o.medium &&
          voucher_type == o.voucher_type &&
          voucher_code_type == o.voucher_code_type &&
          voucher_random_part_length == o.voucher_random_part_length &&
          voucher_prefix == o.voucher_prefix &&
          created_at == o.created_at &&
          created_by == o.created_by &&
          updated_at == o.updated_at &&
          updated_by == o.updated_by
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, id, parent_id, status, name, triggers_on, trigger_name, template, description, customer_information, max_total_budget, max_redemptions, minimum_value, max_discount, redemptions_count, total_budget_spent, vouchers_distributed_count, vouchers_count, currency, currency_symbol, team, channel, purpose, budget_code, medium, voucher_type, voucher_code_type, voucher_random_part_length, voucher_prefix, created_at, created_by, updated_at, updated_by].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Vouchery.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
