=begin
#Vouchery API Reference

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

OpenAPI spec version: 1.0
Contact: hello@vouchery.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'spec_helper'
require 'json'

# Unit tests for Vouchery::VouchersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'VouchersApi' do
  before do
    # run before each test
    @instance = Vouchery::VouchersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VouchersApi' do
    it 'should create an instance of VouchersApi' do
      expect(@instance).to be_instance_of(Vouchery::VouchersApi)
    end
  end

  # unit tests for batch_generate_vouchers
  # Batch create vouchers
  #  &lt;p&gt;Generate a batch of unique vouchers. Each voucher will be created using &lt;code&gt;{prefix}-{random code}&lt;/code&gt; format where code will be a random string of requested type and length. &lt;strong&gt;A prefix needs to be unique within a project.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt; Following code types are supported: &lt;ul&gt; &lt;li&gt;digits&lt;/li&gt; &lt;li&gt;letters&lt;/li&gt; &lt;li&gt;mixed (digits and letters)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;Allowed characters for each code type have been filtered to avoid typing mistakes. Maximum number of codes possible to generate in one batch request is 500 000.&lt;/p&gt;
  # @param id Campaign ID
  # @param [Hash] opts the optional parameters
  # @option opts [Batch] :batch 
  # @return [Array<Voucher>]
  describe 'batch_generate_vouchers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_voucher
  # Create a voucher
  # @param campaign_id Campaign ID
  # @param [Hash] opts the optional parameters
  # @option opts [Voucher] :voucher 
  # @return [Voucher]
  describe 'create_voucher test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_voucher
  # Delete a voucher
  # Delete a single voucher. Vouchers with at least one confirmed redemption can not be deleted.
  # @param id Voucher ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_voucher test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_voucher
  # Find a voucher by campaign metadata
  # &lt;p&gt;Find voucher by campaign metadata.&lt;/p&gt; &lt;p&gt;   Optionally assign found voucher to a customer by passing customer_identifier param.   All vouchers for a customer can be fetched at &lt;a href&#x3D;\&quot;#get_customers-identifier-vouchers\&quot;&gt;/customers/{id}/vouchers&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;If no voucher is available this endpoint will return an empty response and HTTP code &lt;code&gt;204 No content&lt;/code&gt;&lt;/p&gt; 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :medium 
  # @option opts [String] :customer_identifier \&quot;Assign found voucher to a customer with this identifier. Will create customer if not present. Optional.\&quot;
  # @return [Voucher]
  describe 'find_voucher test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_voucher
  # Get a voucher
  # @param id Voucher ID
  # @param [Hash] opts the optional parameters
  # @return [Voucher]
  describe 'get_voucher test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_vouchers
  # Get all vouchers for a campaign
  # @param campaign_id Campaign ID
  # @param [Hash] opts the optional parameters
  # @return [Array<Voucher>]
  describe 'get_vouchers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_vouchers
  # Import your own vouchers
  #  &lt;p&gt;Generate a batch of unique vouchers. Each voucher will be created using &lt;code&gt;{prefix}-{random code}&lt;/code&gt; format where code will be a random string of requested type and length. &lt;strong&gt;A prefix needs to be unique within a project.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt; Following code types are supported: &lt;ul&gt; &lt;li&gt;digits&lt;/li&gt; &lt;li&gt;letters&lt;/li&gt; &lt;li&gt;mixed (digits and letters)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;Allowed characters for each code type have been filtered to avoid typing mistakes. Maximum number of codes possible to generate in one batch request is 500 000.&lt;/p&gt;
  # @param id Campaign ID
  # @param [Hash] opts the optional parameters
  # @option opts [File] :body 
  # @return [InlineResponse200]
  describe 'import_vouchers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_voucher
  # Update a voucher
  # Vouchers with at least one confirmed redemption can not be changed.
  # @param id Voucher ID
  # @param [Hash] opts the optional parameters
  # @option opts [Voucher] :voucher 
  # @return [Voucher]
  describe 'update_voucher test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
